// Generated by gencpp from file xbox_input_pub/xbox_input.msg
// DO NOT EDIT!


#ifndef XBOX_INPUT_PUB_MESSAGE_XBOX_INPUT_H
#define XBOX_INPUT_PUB_MESSAGE_XBOX_INPUT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace xbox_input_pub
{
template <class ContainerAllocator>
struct xbox_input_
{
  typedef xbox_input_<ContainerAllocator> Type;

  xbox_input_()
    : vx(0.0)
    , vy(0.0)
    , wz(0.0)
    , pit(0.0)
    , timestamps()
    , conf(false)  {
    }
  xbox_input_(const ContainerAllocator& _alloc)
    : vx(0.0)
    , vy(0.0)
    , wz(0.0)
    , pit(0.0)
    , timestamps()
    , conf(false)  {
  (void)_alloc;
    }



   typedef double _vx_type;
  _vx_type vx;

   typedef double _vy_type;
  _vy_type vy;

   typedef double _wz_type;
  _wz_type wz;

   typedef double _pit_type;
  _pit_type pit;

   typedef ros::Time _timestamps_type;
  _timestamps_type timestamps;

   typedef uint8_t _conf_type;
  _conf_type conf;





  typedef boost::shared_ptr< ::xbox_input_pub::xbox_input_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::xbox_input_pub::xbox_input_<ContainerAllocator> const> ConstPtr;

}; // struct xbox_input_

typedef ::xbox_input_pub::xbox_input_<std::allocator<void> > xbox_input;

typedef boost::shared_ptr< ::xbox_input_pub::xbox_input > xbox_inputPtr;
typedef boost::shared_ptr< ::xbox_input_pub::xbox_input const> xbox_inputConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::xbox_input_pub::xbox_input_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::xbox_input_pub::xbox_input_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::xbox_input_pub::xbox_input_<ContainerAllocator1> & lhs, const ::xbox_input_pub::xbox_input_<ContainerAllocator2> & rhs)
{
  return lhs.vx == rhs.vx &&
    lhs.vy == rhs.vy &&
    lhs.wz == rhs.wz &&
    lhs.pit == rhs.pit &&
    lhs.timestamps == rhs.timestamps &&
    lhs.conf == rhs.conf;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::xbox_input_pub::xbox_input_<ContainerAllocator1> & lhs, const ::xbox_input_pub::xbox_input_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace xbox_input_pub

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::xbox_input_pub::xbox_input_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::xbox_input_pub::xbox_input_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xbox_input_pub::xbox_input_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xbox_input_pub::xbox_input_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xbox_input_pub::xbox_input_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xbox_input_pub::xbox_input_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::xbox_input_pub::xbox_input_<ContainerAllocator> >
{
  static const char* value()
  {
    return "147af40cd5ad08adffe12a6229afa770";
  }

  static const char* value(const ::xbox_input_pub::xbox_input_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x147af40cd5ad08adULL;
  static const uint64_t static_value2 = 0xffe12a6229afa770ULL;
};

template<class ContainerAllocator>
struct DataType< ::xbox_input_pub::xbox_input_<ContainerAllocator> >
{
  static const char* value()
  {
    return "xbox_input_pub/xbox_input";
  }

  static const char* value(const ::xbox_input_pub::xbox_input_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::xbox_input_pub::xbox_input_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 vx\n"
"float64 vy\n"
"float64 wz\n"
"float64 pit \n"
"time timestamps\n"
"bool conf \n"
;
  }

  static const char* value(const ::xbox_input_pub::xbox_input_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::xbox_input_pub::xbox_input_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vx);
      stream.next(m.vy);
      stream.next(m.wz);
      stream.next(m.pit);
      stream.next(m.timestamps);
      stream.next(m.conf);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct xbox_input_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::xbox_input_pub::xbox_input_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::xbox_input_pub::xbox_input_<ContainerAllocator>& v)
  {
    s << indent << "vx: ";
    Printer<double>::stream(s, indent + "  ", v.vx);
    s << indent << "vy: ";
    Printer<double>::stream(s, indent + "  ", v.vy);
    s << indent << "wz: ";
    Printer<double>::stream(s, indent + "  ", v.wz);
    s << indent << "pit: ";
    Printer<double>::stream(s, indent + "  ", v.pit);
    s << indent << "timestamps: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.timestamps);
    s << indent << "conf: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.conf);
  }
};

} // namespace message_operations
} // namespace ros

#endif // XBOX_INPUT_PUB_MESSAGE_XBOX_INPUT_H
